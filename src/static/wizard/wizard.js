{"cython": {}, "gap": {}, "python": {"Language": {"Tutorial": [["Hello World", ["print \"Hello World\"", "The \"Hello World\" program"]], ["Variables", ["x = 1\ny = x + 1\nprint x\nprint y\n", "A variable is a name for an object. It is done via this syntax:\n``` variablename = object ```\n"]], ["Print Data", ["x = \"Hello\"\ny = 2.123456789\nprint \"%s World, y = %f\" %(x, y)\nprint \"x={x}, y={y:.3f}\".format(**locals())\n", "The \"Hello World\" program printing some values."]], ["Expressions", ["print (5 + 6) * 11\nz = 3\nprint (1 + z)**2\nfrom math import sqrt\nprint sqrt(z)\n", "Expressions are evaluated, they can consist of operators and function calls."]], ["Functions", ["def function1(x, y):\n    z = 10 * x + y\n    return z\n\nprint function1(4, 5)\nprint function1(1,-1)\n", "A function call is one of the most basic levels of abstraction. A common subroutine of evaluations is run with varying initial arguments. The `return` statement is very important: data flows back to where the functions has been called.\n"]], ["Data Structure: List", ["x = [42, \"Hello\", [1,2,3]]\nprint x\nx.append(\"World\")\nprint x\n", "To organize the information in a program, data structures come to help. A very basic one is an ordered collection of arbitrary objects.\n"]], ["Data Structure: Dict(ionary)", ["d = dict()\nd[42] = \"The Answer\"\nd[\"what\"] = [\"this\", \"and\", \"that\"]\nd[(4,2)] = 99\nprint d[(4,2)]\nprint d.keys()\nprint 42 in d", "A dictionary is an mapping of (immutable) objects to arbitrary objects. The immutable objects are called \"keys\" and are most commonly numbers, strings or tuples.\n"]]]}, "Numpy/Scipy": {"Intro": [["Numpy Basics", ["import numpy as np\nprint np, np.__version__\n", "[Numpy](http://docs.scipy.org/) is a library for numerical mathematics.\nIt is usually imported via `import numpy as np`.\n"]]], "Optimization": [["Optimization, 1D, unconstrained", ["import numpy as np\n", "Unconstrained one-dimensional optimization with Scipy."]]]}}, "r": {"Statistics": {"Modeling": [["Linear Model", ["lm(y ~ x)\n", "Linear Model Example"]], ["Nonlinear Model", ["lm(y ~ x)\n", "Nonlinear Model Example"]], ["ANOVA", ["lm1 <- lm(y ~ x)\nanova(lm1)", "ANOVA of a linear model\n"]]]}}, "sage": {"Plotting": {"2D": [["Basic Plot", ["print \"Basic plot: you need a variable, and a function of the variable here x*sin( x^2 )\"\n\n# this defaults many many things you can control\n# here in 2 steps using plot() and show() (which can be combined into one line):\npt    = plot( x*sin(x^2), x )      # create plot\nshow( pt )\n", "Basic plot of a function, letting most options default."]], ["Upper and lower limit", ["print \"Basic plot extended with upper lower, limit on x\"\n\npt    = plot( x*sin(x^2), x,  0, 6*pi )      # args in order:  function, variable, lower limit, upper limit,\nshow( pt )\n", "Basic plot, but using plot arguments to control upper and lower limits on x.\n"]], ["Many more options/arguments", ["print \"Plot with many more options/arguments, used by name that are somewhat self explanatory -- tweak values to see what they do, or google them\"\n# show also offers named arguments for control.\n\npt    = plot( x*sin(x^2), x,  0, 6*pi, rgbcolor=\"red\",  linestyle = \"-\",  fill=False, thickness=1, legend_label =\"a legend label\" )\nshow( pt,  aspect_ratio = 1, axes=true, frame=True,  gridlines=false, figsize=4,  xmin=-0, xmax=8*pi,  ymin=-6, ymax=6 )\n", "Plot showing arguments to both plot and show that allow a lot of control over various aspects of the graph.\n"]], ["Multiple lines/function", ["print \"Plot Multiple lines/function on plots\"\n# also note that functions may be computed and put into variables outside of plot() or show()\n\nfunction1    = x*sin(x^2)\n\nfunction2    = x^.5*sin(x)\n\npt1    = plot( function1, x,  0, 6*pi, rgbcolor=\"red\",   linestyle = \"-\",   fill=False, thickness=1, legend_label =\"functionl\" )\npt2    = plot( function2, x,  0, 6*pi, rgbcolor=\"blue\",  linestyle = \"--\",  fill=False, thickness=1, legend_label =\"function2\" )\nshow( pt1 + pt2,  aspect_ratio = 1, axes=true, frame=True,  gridlines=false, figsize=6,  xmin=-0, xmax=8*pi,  ymin=-8, ymax=8 )\n", "Multiple plots can be plotted on the same graph, optionally using different line styles.\n"]], ["Custom tickmarks on the axes", ["print \"Plot with ticks, LaTeX formatting at specific locations\"\n\nfx     = 1 * (x^2)+1\npt     = plot( fx ,x, 0,5, ticks=[[0,1,e,pi,sqrt(20)], 5 ], tick_formatter=\"latex\")\n\nshow( pt, figsize=[3,3] )\n", "Tickmarks on the axes can be controlled both in position, spacing, special values, and using LaTeX for values such as pi.\n"]], ["Using Python functions", ["print \"Plot using Python functions defined using 'def:'\"\n# see  http://www.sagemath.org/doc/tutorial/tour_functions.html\n\ndef f(z):       # this and next line define a Python function\n    return z^2\n\nprint \"Define plot and show it in one line of code\"\nshow( plot(f, 0, 2), figsize=[6,2] )\n\nprint \"Alternate syntax \"\nvar( \"z\" )\nshow( plot(f(z), z, 0, 2), figsize=[6,2], )\n", "Plot using Python functions. Python functions are defined using the keyword def.\n"]]], "2D Advanced": [["Implicit Plot", ["print \"Implicit plot ( here function of x, y not solved for y )\"\n\nvar ('x y')\nimp  = exp(x)==y^2\nimplicit_plot(imp, (x,-2,2), (y,-3,3), linestyle=\"--\", figsize=4, axes=\"true\", aspect_ratio=1)\n", "Implicit plots are used where the relationship is implicit in an equation rather than explicitly solved.\n"]], ["Parametric Plot", ["print \"Parametric Plot ( here 3 functions)\"\n# for graphing parametric equations ( 2 functions with a common variable implying a relation between the 2 functions )\n# 3 plots all controlled by the parameter t\n\nvar( \"t\" )  # our parameter\n\nll  = -1. * pi    # lower limit of graph\nul  =  1. * pi    # upper limit of graph\n\n# parametric_plot( x axis function, y axis function ) , ( parametric variable, min value, max value ), other plot args )\n\np1 = parametric_plot((cos(t),sin(t)),   (t, ll, ul),    rgbcolor=hue(0.2))\np2 = parametric_plot((cos(t),sin(t)^4), (t, ll, ul),    rgbcolor=hue(0.4))\np3 = parametric_plot((cos(t),sin(t)^8), (t, ll, ul),    rgbcolor=hue(0.6))\n\nshow( p1+p2+p3, axes=false)\n", "Parametric plots are used where the relationship between variables is implied by their relationship to a third variable, the parameter.\n"]], ["Polar Plot", ["print \"Polar Plot\"\n\n# Plot using polar coordinates: note that many of the options for plot() work here.\n\nvar( \"theta\" )\n\nf =  1-2*sin(2*theta); show( f )\n\npp = polar_plot( f, theta, 0, 2*pi, rgbcolor=\"red\", linestyle = \"--\" )\nshow( pp )\n", "Polar plots are used where the relationship between x and y, in Cartesian coordinates, is expressed in terms of r an theta, in polar coordinates.\n"]], ["Slope Field", ["print \"Plot Slope Field\"\n\nvar( \"x\" )\nvar( \"y\" )\n\nslope  =  y ^ 2    # define the slope to be the value of the function y^2\n\npt  = plot_slope_field( slope, ( x, -1, 1 ), ( y, .001, 10 ), plot_points = 10 )    # plot_points: higher numbers plot more \"slopes\"\nshow( pt, aspect_ratio='automatic' )     # aspect_ratio: try .1, 1, 10 'automatic' or leave out and let it default\n", "Slope fields show the slope of 2 variables defined over a \"field\", that is a relationship between x, an y that extends over an area of the plane ( 2 D). The slope is indicated by the slope of a short line segment.\n"]], ["Vector Field", ["print \"Plot vector field\"\n\nvar( \"x\" )\nvar( \"y\" )\n\nA =  x - sin(y)\nB = -y * cos(x)\n\nfield = (A,B)\n\nH = plot_vector_field( field, (x,0,2*pi), (y,0,2*pi), plot_points=15, color='green' )   # plot_points: higher numbers plot more vectors\nshow( H )\n", "Plot of a vector field shows an arrow of variable length indicating the direction an magnitude of the vector at a large number of points over the area of the graph.\n"]], ["List of points", ["print \"Plot of a list of points\"\n\n# either type of list works\ndictionary_list =  {22: 3365, 27: 3295, 37: 3135, 42: 3020, 47: 2880, 52: 2735, 57: 2550}\ntuple_list      =  [ ( 22, 3365) , ( 27, 3295 ), ( 37, 3135 ), ( 42, 3020 ), ( 47, 2880 ), ( 52, 2735 ), (57, 2550 ) ]\n\nlistPlot  = list_plot( dictionary_list )\n\nshow( listPlot, xmin=0, xmax =50, ymin=2000, ymax=4000, figsize=[4,4] )\n", "Points, contained int Python lists, are all plotted. The lists may be dictionary lists, or lists of 2D tuples.\n"]], ["Scatter Plot with Line", ["print \"Scatter plot and line\"   # http://www.packtpub.com/article/plotting-data-sage\n\n# python function\ndef noisy_line(m, b, x):\n    ret  = m * x + b + 0.5 * (random() - 0.5)\n    return ret\n\nslope     = 1.0\nintercept = -0.5\n\nx_coords = [random() for t in range(50)]\ny_coords = [noisy_line(slope, intercept, x) for x in x_coords]\n\nsp = scatter_plot(zip(x_coords, y_coords))\n\nsp += line([(0.0, intercept), (1.0, slope+intercept)], color='red')\n\nsp.show( figsize=[6,2])\n", "Plot points, x coords in one list, y coords in another.\n"]], ["Contour Plot", ["print \"Contour plot\"\n\n# this might be improved, some explanation\n\nf = lambda x,y: cos(x*y)\nshow ( contour_plot(f, (-4, 4), (-4, 4)) )\n", "This plot indicates the contour of a function using 50 shades of gray.\n"]]], "Basic Elements": [["Points as points (plain and fancy)", ["print \"Plotting points as points ( plain and fancy )\"\n\nplainPoints    = point( [1, 1] ) + point( [2, 1] )\nplot1  = plot( plainPoints )\n\nshow( plot1, figsize=4  )\n\n\nfancyPoints = point((0.5, 0.5), rgbcolor=(1, 0, 0), size=30)\nfancyPoints = fancyPoints + point((0.7, 0.7), rgbcolor=(0, 1, 0), size=50)\n\nshow( fancyPoints , figsize=4   )\n", "The graphic object point may be plotted using plot() Plotting this way may combine various elements, both those in this category but also other 2D plots.\n"]], ["Line with point at the end", ["print \"Plot a line with point ( dot ) at end\"\n# computed in polar form, not required\n\nr        =  5\nt        = pi/4.\nx        = r*cos( t )\ny        = r*sin( t )\n\naPoint   = point( ( x, y ), rgbcolor=\"red\", size=30 )\naLine    = line([(0.,0.), ( x, y ) ]  , rgbcolor=\"blue\" , linestyle = \"dashed\"  )\n\nplot  = aPoint + aLine\nshow( plot,  xmin=-1.2, xmax=5.2,  ymin=-1.2, ymax=5.2 , figsize=[3,3] )\n", "A line is plotted with a point at the end.\n"]], ["Lines and points with Python function", ["Print \"Plot lines and points with Python function\"\n\ndef  unitRotator( theta ):\n    x          = cos( theta  )\n    y          = sin( theta  )\n    aPoint     = point2d( ( x, y ), rgbcolor=\"red\", size=30 )  #point2d?\n    aLine      = line([(0.,0.), ( x, y ) ] )\n    myRotator  = aPoint +aLine\n\n    return myRotator\n\ngraphic = point( (0, 0 ) )\nfor theta  in srange( .0, 2*pi, 2*pi/10):\n     graphic = graphic + unitRotator( theta )\n\nshow( graphic , xmin=-1.2, xmax=1.2,  ymin=-1.2, ymax=1.2 , figsize=[3,3] )\n", "A Python function defines many lines and points all of which are plotted.\n"]], ["Arc", ["print \"Plot an Arc\"\n\ngraphic   = ( arc((.1,.2), 1, sector=(0,  1*pi /4) ) )\n\nshow( graphic , xmin=-1.2, xmax=1.2,  ymin=-1.2, ymax=1.2, figsize=[3,3] )\n", "Plot an a arc, a segment of a circle.  Center, radius and section of arc are all parameters.\n"]], ["Circle", ["print \"Plot a Circle\"\n\nanGraphic = circle((0,0), .5, rgbcolor=(1,0,0),  fill=False )    # fill controls filling of circle with color\n\nshow( anGraphic, aspect_ratio=1, figsize = 4 ,xmax = 1, ymax = 1)\n", "Plot a circle.  Center, radius, color are parameters."]], ["Arrow", ["print \"Plot an Arrow\"\n\nanGraphic = arrow((0,1), (2,3) ) # start cord, end cord as tuples\n\nshow( anGraphic,  figsize = 2  )\n", "Plot an Arrow, describe by starting and ending coordinates."]], ["Text", ["print \"Plot Text\"\n# text is followed by tuple for position\naGraphic     = text(\"Sample Text\", (5,4), rgbcolor=(1,0,0))  \nshow( aGraphic, aspect_ratio=1, figsize = 3 )\n", "Plot Text, arguments for text, position, and color.\n"]]], "Intro": [["Intro", ["plot(x * sin(x), (x, -10, 10))", "This is a very simple example how to plot a function."]], ["Simple 2D Plot", ["plot(sin, (x, -10, 10))", "Plot of $\\sin$-function."]], ["Cool 2D Plot", ["plot(x * sin(x), (x, -10, 10))", "Plot of $f(x) = x \\sin(x)$."]], ["Simple 3D Plot", ["%var x, y\nplot3d(sin(x) * cos(y), (x, -10, 10), (y, -10, 10))\n", "3D plot of the $\\sin(x)\\cos(y)$-function."]]]}, "Tutorial": {"Help": [["Getting Help", ["log2?", "Sage has extensive built-in documentation, accessible by typing the name of a function or a constant (for example), followed by a question mark:\n``` log2? ```\nIt's also possible to use the `help(...)` function.\n", "[Sage Documentation](http://doc.sagemath.org/)"]]], "Tour": [["Expressions and Assignments", ["a = 5   # giving \"5\" the name \"a\"\na\n2 == 2  # testing if 2 equals 2\n2 == 3\n2 < 4\na == 5  # not an assignment, but a test if a is still 5\n", "The language of Sage is built on top of Python. There are only some minor differences and hence you can apply almost all Python knowledge for working with Sage. Assignments are one of the most basic concepts of programming. An object is born -- as a result of a creation or as an evaluation of an expression -- and assigned to (variable)name for later use. This assignment happens with the `=` sign on the left -- do not get confused with a mathematical equation!\n"]], ["Mathematical Operations", ["2 ** 3\n2^3\n10 % 3\n8 / 7   # this gives a fraction\n9//2    # integer quotient\n", "Sage uses standard operators to express mathematical operations. In contrast to Python, the `^` is for exponentiation!\n"]], ["Mathematical Functions", ["sqrt(9.81)\nsin(6.28)\ncos(pi)\ntan(pi/4)\n", "Many standard functions are directly available. They produce either numerical approximations or give a symbolic expression.\n"]], ["Types", ["a = 5\ntype(a)\na = 9/82\ntype(a)\na = \"I am a string in quotes\"\ntype(a)\n", "A great deal of programming is about organizing data and information. A \"type\" is a specific pattern, how data is organized with descriptive names. Use Pythons `type(...)` function any time, to learn more about what you are currently dealing with.\n"]], ["Classes", ["class Fraction(object):\n    def __init__(self, nom, denom):\n        self.nominator = nom\n        self.denominator = denom\nf1 = Fraction(1, 2)\nf1.nominator\nf1.denominator\n", "A common way to create types are classes. Understanding their construction is not necessary at this point, but mentioned for completeness.\n"]], ["Functions", ["def f1(x):\n    return 2*x\nf1(11)\n\n%var x\nf2(x) = 2 * x\nf2(21)\n", "In Sage, there are (at least) two types of functions. A Python-function is defined via the `def` keyword and maps optional arguments to a returned value. For more information, [consult the Sage Tour](http://www.sagemath.org/doc/tutorial/tour_help.html#functions-indentation-and-counting).\nSymbolic-functions are defined via `f(x) = ...` and hence fulfull a special purpose for symbolic computations.\n"]], ["Symbolic Expressions", ["%var x, y\ntype(y)\nex1 = (x + y)^2 == 1\nex1\nex2 = x - y == 1\nex2\n", "A great deal of mathematics concerns symbolic expressions. The fundamental building block is a single variable, `x`, `y`, etc.. It can be defined via `var('x')` or the magic command `%var y`. Then, symbolic expressions are built using them. It is important to define the variables as being symblic. Otherwise, the constructed expression is something completely different!\n"]], ["Approximate Symbolic Expressions", ["exp(2)\nn(exp(2))\nsin(31.41592).n(digits=50)\nnumerical_approx(pi, prec=200)\n", "To approximate a symbolic expression (without a free variable), use `n(...)`\n"]], ["LaTeX Formulas", ["%var x, y\nex1 = (x + y)^2 == 1\nshow(ex1)\n", "To see a LaTeX rendering of such a symbolic expression, use Sage's `show(...)` function."]], ["Solving Symbolic Equations", ["%var x, y\nsolve(2*x^2 + 1, x)\nex1 = (x + y)^2 - 1\nex2 = x - y == 1\nsolve([ex1, ex2], [x, y])\n", "Sage's `solve(...)` function allows you to solve symbolic equations exactly. Expressons are automatically assumed to be equal to zero.\n"]], ["Numerical Solutions", ["%var phi\nfind_root(cos(phi)==sin(phi), 0, pi/2)\n", "Sage's `find_root(...)` solves equations numerically. The optional second and third argument constrain the variable to this interval.\n"]], ["Symbolic Differentiation", ["%var x, y\nf = sin(x^2) + 17*y^2\ndiff(f, x)\nf.diff(y, 3)\n", "Symbolic expressions can be differentiated. This works either with Sage's `diff(...)` function or the expression's `.diff(...)` method. You can also compute the n-th derivative directly.\n"]], ["Symbolic Integration", ["%var x\nintegral(x*sin(x^2), x)\n", "If possible, the `integral(...)` function computes a symbolic integral.\n"]], ["Tab-Completion", ["%var x\nex = 2*x/sin(x)\nex.\n", "To learn more about possible operations on an object, first type in the variable, then a dot, and then press the `[TAB]` key. The tab key can either autocomplete you current input at the position of the cursor, or give you a list of possible completions.\nIn the given example here, position the cursor after the dot and press the `[TAB]` key.\n"]]]}}}